
Parse tree (Lisp format):
(program 
        (programHeading PROGRAM 
            (identifier Test) ;) 
        (block 
            (constantDefinitionPart CONST 
                (constantDefinition 
                    (identifier FACTOR) = 
                    (constant 
                        (unsignedNumber 
                            (unsignedInteger 8)))) ; 
                (constantDefinition 
                    (identifier epsilon) = 
                    (constant 
                        (unsignedNumber 
                            (unsignedReal 1.0e-6)))) ;) 
            (typeDefinitionPart TYPE 
                (typeDefinition 
                    (identifier arr) = 
                    (type_ 
                        (structuredType 
                            (unpackedStructuredType 
                                (arrayType array [ 
                                    (typeList 
                                        (indexType 
                                            (simpleType 
                                                (typeIdentifier boolean))) , 
                                        (indexType 
                                            (simpleType 
                                                (typeIdentifier char)))) ] of 
                                    (componentType 
                                        (type_ 
                                            (simpleType 
                                                (typeIdentifier char))))))))) ;) 
            (variableDeclarationPart VAR 
                (variableDeclaration 
                    (identifierList 
                        (identifier i) , 
                        (identifier _var) , 
                        (identifier xyz)) : 
                    (type_ 
                        (simpleType 
                            (typeIdentifier integer)))) ;) 
            (procedureAndFunctionDeclarationPart 
                (procedureOrFunctionDeclaration 
                    (procedureDeclaration PROCEDURE 
                        (identifier p) 
                        (formalParameterList ( 
                            (formalParameterSection const 
                                (parameterGroup 
                                    (identifierList 
                                        (identifier j)) : 
                                    (typeIdentifier real))) )) ; 
                        (block 
                            (variableDeclarationPart VAR 
                                (variableDeclaration 
                                    (identifierList 
                                        (identifier k)) : 
                                    (type_ 
                                        (simpleType 
                                            (typeIdentifier char)))) ;) 
                            (procedureAndFunctionDeclarationPart 
                                (procedureOrFunctionDeclaration 
                                    (functionDeclaration FUNCTION 
                                        (identifier f) 
                                        (formalParameterList ( 
                                            (formalParameterSection 
                                                (parameterGroup 
                                                    (identifierList 
                                                        (identifier x)) : 
                                                    (typeIdentifier real))) )) : 
                                        (resultType 
                                            (typeIdentifier real)) ; 
                                        (block 
                                            (variableDeclarationPart VAR 
                                                (variableDeclaration 
                                                    (identifierList 
                                                        (identifier i)) : 
                                                    (type_ 
                                                        (simpleType 
                                                            (typeIdentifier real)))) ;) 
                                            (compoundStatement BEGIN 
                                                (statements 
                                                    (statement 
                                                        (unlabelledStatement 
                                                            (simpleStatement 
                                                                (assignmentStatement 
                                                                    (variable 
                                                                        (identifier f)) := 
                                                                    (expression 
                                                                        (simpleExpression 
                                                                            (term 
                                                                                (signedFactor 
                                                                                    (factor 
                                                                                        (variable 
                                                                                            (identifier i))))) 
                                                                            (additiveoperator +) 
                                                                            (simpleExpression 
                                                                                (term 
                                                                                    (signedFactor 
                                                                                        (factor 
                                                                                            (variable 
                                                                                                (identifier j))))) 
                                                                                (additiveoperator +) 
                                                                                (simpleExpression 
                                                                                    (term 
                                                                                        (signedFactor 
                                                                                            (factor 
                                                                                                (variable 
                                                                                                    (identifier n))))) 
                                                                                    (additiveoperator +) 
                                                                                    (simpleExpression 
                                                                                        (term 
                                                                                            (signedFactor 
                                                                                                (factor 
                                                                                                    (variable 
                                                                                                        (identifier x)))))))))))))) ; 
                                                    (statement 
                                                        (unlabelledStatement 
                                                            (simpleStatement emptyStatement_)))) END)))) ;) 
                            (compoundStatement BEGIN 
                                (statements 
                                    (statement 
                                        (unlabelledStatement 
                                            (simpleStatement 
                                                (assignmentStatement 
                                                    (variable 
                                                        (identifier k)) := 
                                                    (expression 
                                                        (simpleExpression 
                                                            (term 
                                                                (signedFactor 
                                                                    (factor 
                                                                        (functionDesignator 
                                                                            (identifier chr) ( 
                                                                            (parameterList 
                                                                                (actualParameter 
                                                                                    (expression 
                                                                                        (simpleExpression 
                                                                                            (term 
                                                                                                (signedFactor 
                                                                                                    (factor 
                                                                                                        (variable 
                                                                                                            (identifier i))))) 
                                                                                            (additiveoperator +) 
                                                                                            (simpleExpression 
                                                                                                (term 
                                                                                                    (signedFactor 
                                                                                                        (factor 
                                                                                                            (functionDesignator 
                                                                                                                (identifier trunc) ( 
                                                                                                                (parameterList 
                                                                                                                    (actualParameter 
                                                                                                                        (expression 
                                                                                                                            (simpleExpression 
                                                                                                                                (term 
                                                                                                                                    (signedFactor 
                                                                                                                                        (factor 
                                                                                                                                            (functionDesignator 
                                                                                                                                                (identifier f) ( 
                                                                                                                                                (parameterList 
                                                                                                                                                    (actualParameter 
                                                                                                                                                        (expression 
                                                                                                                                                            (simpleExpression 
                                                                                                                                                                (term 
                                                                                                                                                                    (signedFactor 
                                                                                                                                                                        (factor 
                                                                                                                                                                            (variable 
                                                                                                                                                                                (identifier n))))))))) ))))))))) )))))))))) ))))))))))) ; 
                                    (statement 
                                        (unlabelledStatement 
                                            (simpleStatement emptyStatement_)))) END)))) ;) 
            (compoundStatement BEGIN 
                (statements 
                    (statement 
                        (unlabelledStatement 
                            (simpleStatement 
                                (assignmentStatement 
                                    (variable 
                                        (identifier arr) [ 
                                        (expression 
                                            (simpleExpression 
                                                (term 
                                                    (signedFactor 
                                                        (factor 
                                                            (unsignedConstant 
                                                                (unsignedNumber 
                                                                    (unsignedInteger 45)))))))) ]) := 
                                    (expression 
                                        (simpleExpression 
                                            (term 
                                                (signedFactor 
                                                    (factor 
                                                        (unsignedConstant 
                                                            (unsignedNumber 
                                                                (unsignedInteger 1)))))))))))) ; 
                    (statement 
                        (unlabelledStatement 
                            (simpleStatement emptyStatement_)))) END)) . <EOF>)

Symbol tables:
Nesting Level 0
  NAME                   KIND
  Test                   PROGRAM
  abs                    FUNCTION
  arctan                 FUNCTION
  boolean                type
  char                   type
  chr                    FUNCTION
  cos                    FUNCTION
  eof                    FUNCTION
  eoln                   FUNCTION
  exp                    FUNCTION
  false                  enumeration constant
  integer                type
  ln                     FUNCTION
  odd                    FUNCTION
  ord                    FUNCTION
  pred                   FUNCTION
  read                   PROCEDURE
  readln                 PROCEDURE
  real                   type
  round                  FUNCTION
  sin                    FUNCTION
  sqr                    FUNCTION
  sqrt                   FUNCTION
  string                 type
  succ                   FUNCTION
  true                   enumeration constant
  trunc                  FUNCTION
  write                  PROCEDURE
  writeln                PROCEDURE

Nesting Level 1
  NAME                   KIND
  FACTOR                 constant
  _var                   variable
  arr                    type
  epsilon                constant
  i                      variable
  p                      PROCEDURE
  xyz                    variable

Nesting Level 2
  NAME                   KIND
  f                      FUNCTION
  j                      reference parameter
  k                      variable

Nesting Level 3
  NAME                   KIND
  i                      variable
  x                      value parameter


Typedefs:
arr                   Array
    ElementType:   Array
    ElementType: char                  Scalar

    ElementCount: 256
    IndexType: char


    ElementCount: 2
    IndexType: boolean

